use io;

struct EmployeeStatus : Enum {
// Enums start at 0, unless otherwise stated, steps by one whole value

    // Explicit start
    @start 0;
    // Explicit step
    @step 100;

    ADMIN,    // 0
    MANAGER,  // 100
    ENTRY,    // 200
    GUEST,    // 300
}

// Structs are Compact by default, but you can also specify!
// Explicit 'Compact Struct'
struct Employee : Compact {
// Name of Member, Type of Member
    Status: EmployeeStatus,
    Name:   Char*,
    ID:     Int,
}


// Calling Employee function
Employee : impl {

    private member mut ID_seed: Int = 0; // The member keyword makes ID_seed static on the Employee struct

    // Creates a new Employee struct and sets all of its attributes
    // accordingly.
    // The defer keyword activates after the return statement.
    public func new(name: Char*, status: EmployeeStatus) : Employee {
        defer ID_seed++;
        return Employee {
            Name = name,
            Status = status,
            ID = ID_seed + status;
        }
    }

    // Untyped functions provide a quick and easy way to write 
    // a function that takes in no parameters!
    // self is assumed in Untyped Member Functions
    public func get_name : Char* {
        return self.Name;
    }

    public func get_id : Int {
        return self.ID;
    }

    public func print : Void {
        io.print("Name: {self.Name}\n");
        io.print("ID: {self.ID}\n");
        io.print("\nClearance: ");
        self.Status.print();
    }
}

EmployeeStatus : impl {

    public print : Void {
        switch(self) {
        ADMIN   => io.print("Admin"); break;
        MANAGER => io.print("Manager"); break;
        ENTRY   => io.print("Entry"); break;
        GUEST   => io.print("Guest"); break;
        else    => io.print("Unknown Status"); break; // Akin to default in C
        final   => io.print("\n"); break; // final always runs, unless an error occurs
        }
    }

}

func main() : Int {
    // Using the member function
    const employee1 : Employee = Employee.new(name: "Ashton", status: ADMIN);
    employee1.print();
    // Prints:
    // Name: Ashton
    // ID: 000
    // Clearance: Admin

    // Using Struct definition
    // Note: This assumes that Employee.ID_seed is public
    // This would fail because Employee.ID_seed is private.
    // Make Employee.ID_seed public to run
    const employee2 : Employee = Employee {
        name: "David",
        ID: Employee.ID_seed + ENTRY;
        status: Entry;
    }
    employee2.print();
    // Prints:
    // Name: David
    // ID: 200
    // Clearance: Entry

    const employee3 : Employee = Employee.new("Jacklyn", ENTRY);
    employee3.print();
    // Print
    // Name: Jacklyn
    // ID: 201
    // Clearance: Entry

    return 0;
}